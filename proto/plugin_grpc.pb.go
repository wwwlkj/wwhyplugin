// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// This is a simplified version to ensure compatibility

package proto

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion8

// HostServiceClient is the client API for HostService service.
type HostServiceClient interface {
	// 插件注册
	RegisterPlugin(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	// 插件发送心跳
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error)
	// 插件调用主程序的函数
	CallHostFunction(ctx context.Context, in *CallRequest, opts ...grpc.CallOption) (*CallResponse, error)
	// 插件上报日志
	ReportLog(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error)
}

type hostServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHostServiceClient(cc grpc.ClientConnInterface) HostServiceClient {
	return &hostServiceClient{cc}
}

func (c *hostServiceClient) RegisterPlugin(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/wwplugin.HostService/RegisterPlugin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostServiceClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	out := new(HeartbeatResponse)
	err := c.cc.Invoke(ctx, "/wwplugin.HostService/Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostServiceClient) CallHostFunction(ctx context.Context, in *CallRequest, opts ...grpc.CallOption) (*CallResponse, error) {
	out := new(CallResponse)
	err := c.cc.Invoke(ctx, "/wwplugin.HostService/CallHostFunction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostServiceClient) ReportLog(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error) {
	out := new(LogResponse)
	err := c.cc.Invoke(ctx, "/wwplugin.HostService/ReportLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HostServiceServer is the server API for HostService service.
type HostServiceServer interface {
	// 插件注册
	RegisterPlugin(context.Context, *RegisterRequest) (*RegisterResponse, error)
	// 插件发送心跳
	Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error)
	// 插件调用主程序的函数
	CallHostFunction(context.Context, *CallRequest) (*CallResponse, error)
	// 插件上报日志
	ReportLog(context.Context, *LogRequest) (*LogResponse, error)
}

// UnimplementedHostServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHostServiceServer struct {
}

func (UnimplementedHostServiceServer) RegisterPlugin(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterPlugin not implemented")
}
func (UnimplementedHostServiceServer) Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedHostServiceServer) CallHostFunction(context.Context, *CallRequest) (*CallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallHostFunction not implemented")
}
func (UnimplementedHostServiceServer) ReportLog(context.Context, *LogRequest) (*LogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportLog not implemented")
}

func RegisterHostServiceServer(s grpc.ServiceRegistrar, srv HostServiceServer) {
	s.RegisterService(&HostService_ServiceDesc, srv)
}

func _HostService_RegisterPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).RegisterPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wwplugin.HostService/RegisterPlugin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).RegisterPlugin(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostService_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wwplugin.HostService/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostService_CallHostFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).CallHostFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wwplugin.HostService/CallHostFunction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).CallHostFunction(ctx, req.(*CallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostService_ReportLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).ReportLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wwplugin.HostService/ReportLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).ReportLog(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var HostService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wwplugin.HostService",
	HandlerType: (*HostServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterPlugin",
			Handler:    _HostService_RegisterPlugin_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _HostService_Heartbeat_Handler,
		},
		{
			MethodName: "CallHostFunction",
			Handler:    _HostService_CallHostFunction_Handler,
		},
		{
			MethodName: "ReportLog",
			Handler:    _HostService_ReportLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/plugin.proto",
}

// PluginServiceClient is the client API for PluginService service.
type PluginServiceClient interface {
	// 主程序调用插件函数
	CallPluginFunction(ctx context.Context, in *CallRequest, opts ...grpc.CallOption) (*CallResponse, error)
	// 主程序向插件推送消息流
	ReceiveMessages(ctx context.Context, opts ...grpc.CallOption) (PluginService_ReceiveMessagesClient, error)
	// 插件状态查询
	GetPluginStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// 插件关闭通知
	Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error)
}

type pluginServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPluginServiceClient(cc grpc.ClientConnInterface) PluginServiceClient {
	return &pluginServiceClient{cc}
}

func (c *pluginServiceClient) CallPluginFunction(ctx context.Context, in *CallRequest, opts ...grpc.CallOption) (*CallResponse, error) {
	out := new(CallResponse)
	err := c.cc.Invoke(ctx, "/wwplugin.PluginService/CallPluginFunction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginServiceClient) ReceiveMessages(ctx context.Context, opts ...grpc.CallOption) (PluginService_ReceiveMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &PluginService_ServiceDesc.Streams[0], "/wwplugin.PluginService/ReceiveMessages", opts...)
	if err != nil {
		return nil, err
	}
	x := &pluginServiceReceiveMessagesClient{stream}
	return x, nil
}

type PluginService_ReceiveMessagesClient interface {
	Send(*MessageRequest) error
	CloseAndRecv() (*MessageResponse, error)
	grpc.ClientStream
}

type pluginServiceReceiveMessagesClient struct {
	grpc.ClientStream
}

func (x *pluginServiceReceiveMessagesClient) Send(m *MessageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pluginServiceReceiveMessagesClient) CloseAndRecv() (*MessageResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(MessageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pluginServiceClient) GetPluginStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/wwplugin.PluginService/GetPluginStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginServiceClient) Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error) {
	out := new(ShutdownResponse)
	err := c.cc.Invoke(ctx, "/wwplugin.PluginService/Shutdown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PluginServiceServer is the server API for PluginService service.
type PluginServiceServer interface {
	// 主程序调用插件函数
	CallPluginFunction(context.Context, *CallRequest) (*CallResponse, error)
	// 主程序向插件推送消息流
	ReceiveMessages(PluginService_ReceiveMessagesServer) error
	// 插件状态查询
	GetPluginStatus(context.Context, *StatusRequest) (*StatusResponse, error)
	// 插件关闭通知
	Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error)
}

// UnimplementedPluginServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPluginServiceServer struct {
}

func (UnimplementedPluginServiceServer) CallPluginFunction(context.Context, *CallRequest) (*CallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallPluginFunction not implemented")
}
func (UnimplementedPluginServiceServer) ReceiveMessages(PluginService_ReceiveMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method ReceiveMessages not implemented")
}
func (UnimplementedPluginServiceServer) GetPluginStatus(context.Context, *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPluginStatus not implemented")
}
func (UnimplementedPluginServiceServer) Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}

func RegisterPluginServiceServer(s grpc.ServiceRegistrar, srv PluginServiceServer) {
	s.RegisterService(&PluginService_ServiceDesc, srv)
}

func _PluginService_CallPluginFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).CallPluginFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wwplugin.PluginService/CallPluginFunction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).CallPluginFunction(ctx, req.(*CallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginService_ReceiveMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PluginServiceServer).ReceiveMessages(&pluginServiceReceiveMessagesServer{stream})
}

type PluginService_ReceiveMessagesServer interface {
	SendAndClose(*MessageResponse) error
	Recv() (*MessageRequest, error)
	grpc.ServerStream
}

type pluginServiceReceiveMessagesServer struct {
	grpc.ServerStream
}

func (x *pluginServiceReceiveMessagesServer) SendAndClose(m *MessageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pluginServiceReceiveMessagesServer) Recv() (*MessageRequest, error) {
	m := new(MessageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PluginService_GetPluginStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).GetPluginStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wwplugin.PluginService/GetPluginStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).GetPluginStatus(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginService_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wwplugin.PluginService/Shutdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).Shutdown(ctx, req.(*ShutdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var PluginService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wwplugin.PluginService",
	HandlerType: (*PluginServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CallPluginFunction",
			Handler:    _PluginService_CallPluginFunction_Handler,
		},
		{
			MethodName: "GetPluginStatus",
			Handler:    _PluginService_GetPluginStatus_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _PluginService_Shutdown_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReceiveMessages",
			Handler:       _PluginService_ReceiveMessages_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/plugin.proto",
}
